#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ERP")]
	public partial class MedicalDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertMedicine(Medicine instance);
    partial void UpdateMedicine(Medicine instance);
    partial void DeleteMedicine(Medicine instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertConfig(Config instance);
    partial void UpdateConfig(Config instance);
    partial void DeleteConfig(Config instance);
    #endregion
		
		public MedicalDataClassesDataContext() : 
				base(global::Model.Properties.Settings.Default.ERPConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MedicalDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicalDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicalDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicalDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Patient> Patient
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Medicine> Medicine
		{
			get
			{
				return this.GetTable<Medicine>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctor
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Config> Config
		{
			get
			{
				return this.GetTable<Config>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatID;
		
		private string _PatName;
		
		private System.Nullable<int> _Age;
		
		private string _Gender;
		
		private System.Nullable<int> _TelPhone;
		
		private string _Addresses;
		
		private System.Nullable<bool> _IsDelete;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatIDChanging(int value);
    partial void OnPatIDChanged();
    partial void OnPatNameChanging(string value);
    partial void OnPatNameChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnTelPhoneChanging(System.Nullable<int> value);
    partial void OnTelPhoneChanged();
    partial void OnAddressesChanging(string value);
    partial void OnAddressesChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    #endregion
		
		public Patient()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PatID
		{
			get
			{
				return this._PatID;
			}
			set
			{
				if ((this._PatID != value))
				{
					this.OnPatIDChanging(value);
					this.SendPropertyChanging();
					this._PatID = value;
					this.SendPropertyChanged("PatID");
					this.OnPatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PatName
		{
			get
			{
				return this._PatName;
			}
			set
			{
				if ((this._PatName != value))
				{
					this.OnPatNameChanging(value);
					this.SendPropertyChanging();
					this._PatName = value;
					this.SendPropertyChanged("PatName");
					this.OnPatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(5)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelPhone", DbType="Int")]
		public System.Nullable<int> TelPhone
		{
			get
			{
				return this._TelPhone;
			}
			set
			{
				if ((this._TelPhone != value))
				{
					this.OnTelPhoneChanging(value);
					this.SendPropertyChanging();
					this._TelPhone = value;
					this.SendPropertyChanged("TelPhone");
					this.OnTelPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Addresses", DbType="VarChar(100)")]
		public string Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				if ((this._Addresses != value))
				{
					this.OnAddressesChanging(value);
					this.SendPropertyChanging();
					this._Addresses = value;
					this.SendPropertyChanged("Addresses");
					this.OnAddressesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medicine")]
	public partial class Medicine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedID;
		
		private string _MedName;
		
		private int _MedTypeID;
		
		private string _MedUnit;
		
		private string _MedStandard;
		
		private string _MedApproval;
		
		private string _MedSpellFirst;
		
		private System.Nullable<bool> _IsDelete;
		
		private EntityRef<Config> _Config;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedIDChanging(int value);
    partial void OnMedIDChanged();
    partial void OnMedNameChanging(string value);
    partial void OnMedNameChanged();
    partial void OnMedTypeIDChanging(int value);
    partial void OnMedTypeIDChanged();
    partial void OnMedUnitChanging(string value);
    partial void OnMedUnitChanged();
    partial void OnMedStandardChanging(string value);
    partial void OnMedStandardChanged();
    partial void OnMedApprovalChanging(string value);
    partial void OnMedApprovalChanged();
    partial void OnMedSpellFirstChanging(string value);
    partial void OnMedSpellFirstChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    #endregion
		
		public Medicine()
		{
			this._Config = default(EntityRef<Config>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedID
		{
			get
			{
				return this._MedID;
			}
			set
			{
				if ((this._MedID != value))
				{
					this.OnMedIDChanging(value);
					this.SendPropertyChanging();
					this._MedID = value;
					this.SendPropertyChanged("MedID");
					this.OnMedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string MedName
		{
			get
			{
				return this._MedName;
			}
			set
			{
				if ((this._MedName != value))
				{
					this.OnMedNameChanging(value);
					this.SendPropertyChanging();
					this._MedName = value;
					this.SendPropertyChanged("MedName");
					this.OnMedNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedTypeID", DbType="Int NOT NULL")]
		public int MedTypeID
		{
			get
			{
				return this._MedTypeID;
			}
			set
			{
				if ((this._MedTypeID != value))
				{
					if (this._Config.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedTypeIDChanging(value);
					this.SendPropertyChanging();
					this._MedTypeID = value;
					this.SendPropertyChanged("MedTypeID");
					this.OnMedTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedUnit", DbType="VarChar(5)")]
		public string MedUnit
		{
			get
			{
				return this._MedUnit;
			}
			set
			{
				if ((this._MedUnit != value))
				{
					this.OnMedUnitChanging(value);
					this.SendPropertyChanging();
					this._MedUnit = value;
					this.SendPropertyChanged("MedUnit");
					this.OnMedUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedStandard", DbType="VarChar(20)")]
		public string MedStandard
		{
			get
			{
				return this._MedStandard;
			}
			set
			{
				if ((this._MedStandard != value))
				{
					this.OnMedStandardChanging(value);
					this.SendPropertyChanging();
					this._MedStandard = value;
					this.SendPropertyChanged("MedStandard");
					this.OnMedStandardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedApproval", DbType="VarChar(30)")]
		public string MedApproval
		{
			get
			{
				return this._MedApproval;
			}
			set
			{
				if ((this._MedApproval != value))
				{
					this.OnMedApprovalChanging(value);
					this.SendPropertyChanging();
					this._MedApproval = value;
					this.SendPropertyChanged("MedApproval");
					this.OnMedApprovalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedSpellFirst", DbType="VarChar(20)")]
		public string MedSpellFirst
		{
			get
			{
				return this._MedSpellFirst;
			}
			set
			{
				if ((this._MedSpellFirst != value))
				{
					this.OnMedSpellFirstChanging(value);
					this.SendPropertyChanging();
					this._MedSpellFirst = value;
					this.SendPropertyChanged("MedSpellFirst");
					this.OnMedSpellFirstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Config_Medicine", Storage="_Config", ThisKey="MedTypeID", OtherKey="SignID", IsForeignKey=true)]
		public Config Config
		{
			get
			{
				return this._Config.Entity;
			}
			set
			{
				Config previousValue = this._Config.Entity;
				if (((previousValue != value) 
							|| (this._Config.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Config.Entity = null;
						previousValue.Medicine.Remove(this);
					}
					this._Config.Entity = value;
					if ((value != null))
					{
						value.Medicine.Add(this);
						this._MedTypeID = value.SignID;
					}
					else
					{
						this._MedTypeID = default(int);
					}
					this.SendPropertyChanged("Config");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DocID;
		
		private string _DocPassword;
		
		private string _DocName;
		
		private string _DocSex;
		
		private System.Nullable<int> _DocAge;
		
		private string _DocTel;
		
		private int _DocDutyID;
		
		private System.Nullable<bool> _IsDelete;
		
		private EntityRef<Config> _Config;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocIDChanging(string value);
    partial void OnDocIDChanged();
    partial void OnDocPasswordChanging(string value);
    partial void OnDocPasswordChanged();
    partial void OnDocNameChanging(string value);
    partial void OnDocNameChanged();
    partial void OnDocSexChanging(string value);
    partial void OnDocSexChanged();
    partial void OnDocAgeChanging(System.Nullable<int> value);
    partial void OnDocAgeChanged();
    partial void OnDocTelChanging(string value);
    partial void OnDocTelChanged();
    partial void OnDocDutyIDChanging(int value);
    partial void OnDocDutyIDChanged();
    partial void OnIsDeleteChanging(System.Nullable<bool> value);
    partial void OnIsDeleteChanged();
    #endregion
		
		public Doctor()
		{
			this._Config = default(EntityRef<Config>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DocID
		{
			get
			{
				return this._DocID;
			}
			set
			{
				if ((this._DocID != value))
				{
					this.OnDocIDChanging(value);
					this.SendPropertyChanging();
					this._DocID = value;
					this.SendPropertyChanged("DocID");
					this.OnDocIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocPassword", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string DocPassword
		{
			get
			{
				return this._DocPassword;
			}
			set
			{
				if ((this._DocPassword != value))
				{
					this.OnDocPasswordChanging(value);
					this.SendPropertyChanging();
					this._DocPassword = value;
					this.SendPropertyChanged("DocPassword");
					this.OnDocPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocName", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DocName
		{
			get
			{
				return this._DocName;
			}
			set
			{
				if ((this._DocName != value))
				{
					this.OnDocNameChanging(value);
					this.SendPropertyChanging();
					this._DocName = value;
					this.SendPropertyChanged("DocName");
					this.OnDocNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocSex", DbType="VarChar(5)")]
		public string DocSex
		{
			get
			{
				return this._DocSex;
			}
			set
			{
				if ((this._DocSex != value))
				{
					this.OnDocSexChanging(value);
					this.SendPropertyChanging();
					this._DocSex = value;
					this.SendPropertyChanged("DocSex");
					this.OnDocSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocAge", DbType="Int")]
		public System.Nullable<int> DocAge
		{
			get
			{
				return this._DocAge;
			}
			set
			{
				if ((this._DocAge != value))
				{
					this.OnDocAgeChanging(value);
					this.SendPropertyChanging();
					this._DocAge = value;
					this.SendPropertyChanged("DocAge");
					this.OnDocAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocTel", DbType="VarChar(20)")]
		public string DocTel
		{
			get
			{
				return this._DocTel;
			}
			set
			{
				if ((this._DocTel != value))
				{
					this.OnDocTelChanging(value);
					this.SendPropertyChanging();
					this._DocTel = value;
					this.SendPropertyChanged("DocTel");
					this.OnDocTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDutyID", DbType="Int NOT NULL")]
		public int DocDutyID
		{
			get
			{
				return this._DocDutyID;
			}
			set
			{
				if ((this._DocDutyID != value))
				{
					if (this._Config.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocDutyIDChanging(value);
					this.SendPropertyChanging();
					this._DocDutyID = value;
					this.SendPropertyChanged("DocDutyID");
					this.OnDocDutyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit")]
		public System.Nullable<bool> IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Config_Doctor", Storage="_Config", ThisKey="DocDutyID", OtherKey="SignID", IsForeignKey=true)]
		public Config Config
		{
			get
			{
				return this._Config.Entity;
			}
			set
			{
				Config previousValue = this._Config.Entity;
				if (((previousValue != value) 
							|| (this._Config.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Config.Entity = null;
						previousValue.Doctor.Remove(this);
					}
					this._Config.Entity = value;
					if ((value != null))
					{
						value.Doctor.Add(this);
						this._DocDutyID = value.SignID;
					}
					else
					{
						this._DocDutyID = default(int);
					}
					this.SendPropertyChanged("Config");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Config")]
	public partial class Config : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SignID;
		
		private string _Name;
		
		private int _StyleID;
		
		private EntitySet<Medicine> _Medicine;
		
		private EntitySet<Doctor> _Doctor;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSignIDChanging(int value);
    partial void OnSignIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStyleIDChanging(int value);
    partial void OnStyleIDChanged();
    #endregion
		
		public Config()
		{
			this._Medicine = new EntitySet<Medicine>(new Action<Medicine>(this.attach_Medicine), new Action<Medicine>(this.detach_Medicine));
			this._Doctor = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctor), new Action<Doctor>(this.detach_Doctor));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SignID
		{
			get
			{
				return this._SignID;
			}
			set
			{
				if ((this._SignID != value))
				{
					this.OnSignIDChanging(value);
					this.SendPropertyChanging();
					this._SignID = value;
					this.SendPropertyChanged("SignID");
					this.OnSignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StyleID", DbType="Int NOT NULL")]
		public int StyleID
		{
			get
			{
				return this._StyleID;
			}
			set
			{
				if ((this._StyleID != value))
				{
					this.OnStyleIDChanging(value);
					this.SendPropertyChanging();
					this._StyleID = value;
					this.SendPropertyChanged("StyleID");
					this.OnStyleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Config_Medicine", Storage="_Medicine", ThisKey="SignID", OtherKey="MedTypeID")]
		public EntitySet<Medicine> Medicine
		{
			get
			{
				return this._Medicine;
			}
			set
			{
				this._Medicine.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Config_Doctor", Storage="_Doctor", ThisKey="SignID", OtherKey="DocDutyID")]
		public EntitySet<Doctor> Doctor
		{
			get
			{
				return this._Doctor;
			}
			set
			{
				this._Doctor.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medicine(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Config = this;
		}
		
		private void detach_Medicine(Medicine entity)
		{
			this.SendPropertyChanging();
			entity.Config = null;
		}
		
		private void attach_Doctor(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Config = this;
		}
		
		private void detach_Doctor(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.Config = null;
		}
	}
}
#pragma warning restore 1591
